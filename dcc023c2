#!/usr/bin/python

import struct
import sys
import socket

#limite do tamanho da mensagem
MAX_TAMANHO = 2


def carry_around_add(a, b):
  c = a + b
  return(c &0xffff)+(c >>16)

#Checksum
def checksum(msg):
  s =0
  for i in range(0, len(msg),2):
    w = ord(msg[i])+(ord(msg[i+1])<<8)
    s = carry_around_add(s, w)
  return~s &0xffff

def conversaoHEXBYTE(data):
  data = data.split()
  data = map(lambda x: int(x,16), data)
  data = struct.pack("%dB" % len(data), *data)
  return data


for arg in sys.argv[1:]:
  #print arg
  if arg == '-c':
    #print 'Cliente'
    for aux in sys.argv[2:3]:
      ip,port=aux.split(":")
    auxInput = sys.argv[3:4]
    auxOutput = sys.argv[4:]
    defInput = ''.join(auxInput)		#Input definitivo
    defOutput = ''.join(auxOutput)		#Output definitivo
    HOST = ip
    PORT = int(port)
    tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    dest = (HOST, PORT)
    tcp.connect(dest)

    #Abre o arquivo pra leitura
    file = open(defInput,'rb')
    #Salva o conteudo do arquivo na variavel mensagem, com limite de tamanho
    mensagem = file.read(MAX_TAMANHO)
    #criar o cabecalho
    #tamanho da mensagem em byte
    #print "Tamanho da mensagem: ", len(mensagem)
    tamanhoMensagem = struct.pack('>H', len(mensagem))
    #convertendo SYNC para bytes
    syncInicial = "dc c0 23 c2"
    syncFINAL = conversaoHEXBITE(syncInicial)
    #print "SYNC: ", syncFINAL

    #calcular o checksum
    valorChecksum = syncFINAL + syncFINAL + conversaoHEXBYTE("00 00") + tamanhoMensagem + conversaoHEXBYTE("00 00")


    # dcc023c2dcc023c2faef0004000001020304


    #print file.read()

    tcp.close()

  if arg == '-s':
    #print 'Servidor'
    port = sys.argv[2:3]
    HOST = ''
    PORT = int(''.join(port))
    auxInput = sys.argv[3:4]
    auxOutput = sys.argv[4:]
    defInput = ''.join(auxInput)		#Input definitivo
    defOutput = ''.join(auxOutput)		#Output definitivo
    tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    orig = (HOST, PORT)
    tcp.bind(orig)
    tcp.listen(1)
    while True:
      con, cliente = tcp.accept()
      file = open(defInput,'rb')
      con.close()
