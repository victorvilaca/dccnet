#!/usr/bin/python

import struct
import sys
import socket
from threading import Thread

# limite do tamanho da mensagem
MAX_TAMANHO = 65535
# ACK sempre tera size 0
ack = ''
# flags
flagACK = '80'
flagEND = '40'
flagEnvio = '3f'


def carry_around_add(a, b):
    c = a + b
    return (c & 0xffff) + (c >> 16)


# Checksum
def checksum(msg):
    s = 0
    for i in range(0, len(msg), 2):
        w = ord(msg[i]) + (ord(msg[i + 1]) << 8)
        s = carry_around_add(s, w)
    return ~s & 0xffff


def conversaoHEXBYTE(data):
    data = data.split()
    data = map(lambda x: int(x, 16), data)
    data = struct.pack("%dB" % len(data), *data)
    return data


def criaCabecalho(msg, id, flag):
    # criar o cabecalho
    # tamanho da mensagem em byte
    tamanhoMensagem = struct.pack('>H', len(msg))
    # convertendo SYNC para bytes
    syncInicial = "dc c0 23 c2"
    syncFINAL = conversaoHEXBYTE(syncInicial)
    if (id > 0):
        idFinal = conversaoHEXBYTE("00")
    else:
        idFinal = conversaoHEXBYTE("01")
    if flag == flagACK:
        flagFinal = conversaoHEXBYTE("80")
    if flag == flagEND:
        flagFinal = conversaoHEXBYTE("40")
    else:
        flagFinal = conversaoHEXBYTE("3f")
    # calcular o cabecalho
    valorCabecalho = syncFINAL + syncFINAL + conversaoHEXBYTE("00 00") + tamanhoMensagem + idFinal + flagFinal
    return valorCabecalho


def transmiteDados(nomeDaThread, defInput, tcp):
    # Abre o arquivo pra leitura
    file = open(defInput, 'rb')
    idDeEnvio = 1  # id inica com 1 para que o id no cabecalho seja 0

    # Salva o conteudo do arquivo na variavel mensagem, com limite de tamanho
    while 1:
        mensagem = file.read(MAX_TAMANHO)
        if not mensagem:  # se EOF
            cabecalho = criaCabecalho(mensagem, idDeEnvio, flagEND)
            mensagemFinal = cabecalho + mensagem
            tcp.send(mensagemFinal)
            print "Enviando mensagem final."
            tcp.settimeout(1)
            confirmacao = tcp.recv(4096)
            if confirmacao == cabecalho:  # Acabou o que tinha que ser feito, sai da funcao
                return
	    if confirmacao != cabecalho:
		return  # se os valor recebido nao bater com os calculos, erro detectado
		print "Erro, cancelando transmissao de dados."
        else:
            cabecalho = criaCabecalho(mensagem, idDeEnvio, flagEnvio)
            mensagemFinal = cabecalho + mensagem
            tcp.send(mensagemFinal)
            print "Enviando mensagem: ", mensagem
            tcp.settimeout(1)
            confirmacao = tcp.recv(4096)
            cabecalhoDeConfirmacao = criaCabecalho(ack, idDeEnvio, flagACK)
            if confirmacao == cabecalhoDeConfirmacao:  # SE o cabecalho recebido for ACK
                if idDeEnvio > 0:  # troca o valor do ID
                    idDeEnvio = 0
                else:
                    idDeEnvio = 1
	    if confirmacao != cabecalhoDeConfirmacao:
		return  # se os valor recebido nao bater com os calculos, erro detectado
	   	print "Erro, cancelando transmissao de dados."


def recebeDados(nomeThread, defOutput, con):
    print nomeThread
    identificador = 1  # id inica com 1 para que o id no cabecalho seja 0
    file = open(defOutput, 'wb')
    while True:
        v = con.recv(4096)
        conferirChecksum = v[:14]  # cabecalho recebido que sera comparado posteriormente
        dados = v[14:]  # mensagem recebida
        fecharConexao = criaCabecalho('', identificador, flagEND)
        if (fecharConexao == conferirChecksum and identificador > 0):  # verifica se foi enviado um END
            con.send(criaCabecalho('', 1, flagEND))  # primeiro com o ID = 0
            print "Enviando confirmacao END"
            identificador = 0
            return
        if (fecharConexao == conferirChecksum and identificador == 0):
            con.send(criaCabecalho('', 0, flagEND))  # depois com o ID = 1
            print "Enviando confirmacao END"
            identificador = 1
            return
        cabec0 = criaCabecalho(dados, 1, flagEnvio)
        cabec1 = criaCabecalho(dados, 0, flagEnvio)
        if cabec0 == conferirChecksum and identificador > 0:  # testando com id do cabecalho = 0 e o ultimo identificador TEM que ser diferente
            con.send(criaCabecalho(ack, 1, flagACK))  # se for igual, envia ACK
            file.write(dados)
            identificador = 0
            print 'Enviando confirmacao, id = 0'
        if cabec1 == conferirChecksum and identificador == 0:  # testando com id do cabecalho = 1 e o ultimo identificador TEM que ser diferente
            con.send(criaCabecalho(ack, 0, flagACK))  # se for igual, envia ACK
            file.write(dados)
            identificador = 1
            print 'Enviando confirmacao, id = 1'
	if cabec0 != conferirChecksum and cabec1 != conferirChecksum and fecharConexao != conferirChecksum:
	   return  # se os valor recebido nao bater com nenhum dos calculos, erro detectado
	   print "Erro, cancelando transmissao de dados."



for arg in sys.argv[1:]:
    if arg == '-c':
        for aux in sys.argv[2:3]:
            ip, port = aux.split(":")
        auxInput = sys.argv[3:4]
        auxOutput = sys.argv[4:]
        defInput = ''.join(auxInput)  # Input definitivo
        defOutput = ''.join(auxOutput)  # Output definitivo
        HOST = ip
        PORT = int(port)
        tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        dest = (HOST, PORT)
        tcp.connect(dest)
        threadOne = Thread(target=transmiteDados("Thread1", defInput, tcp))
        threadTwo = Thread(target=recebeDados("Thread2", defOutput, tcp))
        # inicia a thread para transmitir dados
        threadOne.start()
        # inicia a thread para receber dados
        threadTwo.start()
        # fecha conexao
        tcp.close()

    if arg == '-s':
        port = sys.argv[2:3]
        HOST = ''
        PORT = int(''.join(port))
        auxInput = sys.argv[3:4]
        auxOutput = sys.argv[4:]
        defInput = ''.join(auxInput)  # Input definitivo
        defOutput = ''.join(auxOutput)  # Output definitivo
        tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        orig = (HOST, PORT)
        tcp.bind(orig)
        tcp.listen(1)
        con, cliente = tcp.accept()
        threadOne = Thread(target=recebeDados("Thread1", defOutput, con))
        threadTwo = Thread(target=transmiteDados("Thread2", defInput, con))
        while True:
            # inicia a thread para receber dados
            threadOne.start()
            # inicia a thread para transmitir dados
            threadTwo.start()
        # fecha c
