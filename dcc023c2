#!/usr/bin/python

import struct
import sys
import socket

#limite do tamanho da mensagem
MAX_TAMANHO = 2
#ACK sempre tera size 0
ack = ''					

def carry_around_add(a, b):
  c = a + b
  return(c &0xffff)+(c >>16)

#Checksum
def checksum(msg):
  s =0
  for i in range(0, len(msg),2):
    w = ord(msg[i])+(ord(msg[i+1])<<8)
    s = carry_around_add(s, w)
  return~s &0xffff

def conversaoHEXBYTE(data):
  data = data.split()
  data = map(lambda x: int(x,16), data)
  data = struct.pack("%dB" % len(data), *data)
  return data

def criaCabecalho(msg, id):
  # criar o cabecalho
  # tamanho da mensagem em byte
  tamanhoMensagem = struct.pack('>H', len(msg))
  # convertendo SYNC para bytes
  syncInicial = "dc c0 23 c2"
  syncFINAL = conversaoHEXBYTE(syncInicial)
  if(id > 0):
    idFinal = conversaoHEXBYTE("00 00")
  else:
    idFinal = conversaoHEXBYTE("00 01")
  # calcular o checksum
  valorChecksum = syncFINAL + syncFINAL + conversaoHEXBYTE("00 00") + tamanhoMensagem + idFinal
  return valorChecksum

for arg in sys.argv[1:]:
  if arg == '-c':
    for aux in sys.argv[2:3]:
      ip,port=aux.split(":")
    auxInput = sys.argv[3:4]
    auxOutput = sys.argv[4:]
    defInput = ''.join(auxInput)		#Input definitivo
    defOutput = ''.join(auxOutput)		#Output definitivo
    HOST = ip
    PORT = int(port)
    tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    dest = (HOST, PORT)
    tcp.connect(dest)

    #Abre o arquivo pra leitura
    file = open(defInput,'rb')
    idDeEnvio = 1		#id global inica com 1 para que o id no cabecalho seja 0
    #Salva o conteudo do arquivo na variavel mensagem, com limite de tamanho
    #tem que fazer o while aqui
    while 1:
      mensagem = file.read(MAX_TAMANHO)
      cabecalho = criaCabecalho(mensagem, idDeEnvio)
      mensagemFinal = cabecalho + mensagem #conversaoHEXBYTE(mensagem)
      tcp.send(mensagemFinal)
      print "Enviando mensagem: ", mensagem
      tcp.settimeout(1)
      confirmacao = tcp.recv(1024)
      cabecalhoDeConfirmacao = criaCabecalho(ack, idDeEnvio)		
      if confirmacao == cabecalhoDeConfirmacao:				#SE o cabecalho recebido for ACK
        #print 'Confirmado!'
        if idDeEnvio > 0:
  	  idDeEnvio = 0
        else:
          idDeEnvio = 1
    #fim do while
    tcp.close()

  if arg == '-s':
    port = sys.argv[2:3]
    HOST = ''
    PORT = int(''.join(port))
    auxInput = sys.argv[3:4]
    auxOutput = sys.argv[4:]
    defInput = ''.join(auxInput)		#Input definitivo
    defOutput = ''.join(auxOutput)		#Output definitivo
    tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    orig = (HOST, PORT)
    tcp.bind(orig)
    tcp.listen(1)
    identificador = 1				#id global inica com 1 para que o id no cabecalho seja 0
    while True:
      con, cliente = tcp.accept()
      file = open(defInput,'wb')
      v = con.recv(1024)
      conferirChecksum = v[:14]			#cabecalho recebido que sera comparado posteriormente
      dados = v[14:]				#mensagem recebida
      cabec0 = criaCabecalho(dados, 1)		#cabecalho a ser montado com a mensagem recebida
      cabec1 = criaCabecalho(dados, 0)
      if (cabec0 == conferirChecksum and identificador > 0):		#testando com id do cabecalho = 0 e o ultimo identificador TEM que ser diferente
        con.send(criaCabecalho(ack, 1))					#se for igual,envia ACK
        file.write(dados)
        identificador = 0
        print 'Enviando confirmacao, id = 0'
      if (cabec1 == conferirChecksum and identificador == 0):		#testando com id do cabecalho = 1 e o ultimo identificador TEM que ser diferente
        con.send(criaCabecalho(ack, 0))					#se for igual,envia ACK
        file.write(dados)
        identificador = 1
        print 'Enviando confirmacao, id = 1'
      con.close()
