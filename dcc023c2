#!/usr/bin/python

import struct
import sys
import socket
import thread

#limite do tamanho da mensagem
MAX_TAMANHO = 2


def carry_around_add(a, b):
  c = a + b
  return(c &0xffff)+(c >>16)

#Checksum
def checksum(msg):
  s =0
  for i in range(0, len(msg),2):
    w = ord(msg[i])+(ord(msg[i+1])<<8)
    s = carry_around_add(s, w)
  return~s &0xffff

def conversaoHEXBYTE(data):
  data = data.split()
  data = map(lambda x: int(x,16), data)
  data = struct.pack("%dB" % len(data), *data)
  return data

def criaCabecalho(msg):
  # criar o cabecalho
  # tamanho da mensagem em byte
  tamanhoMensagem = struct.pack('>H', len(msg))

  # convertendo SYNC para bytes
  syncInicial = "dc c0 23 c2"
  syncFINAL = conversaoHEXBYTE(syncInicial)

  if(len(msg) > 0):
    id = conversaoHEXBYTE("00 00")
  else:
    id = conversaoHEXBYTE("00 01")

  # calcular o checksum
  valorChecksum = syncFINAL + syncFINAL + conversaoHEXBYTE("00 00") + tamanhoMensagem + id

  return valorChecksum




for arg in sys.argv[1:]
  if arg == '-c':
    for aux in sys.argv[2:3]:
      ip,port=aux.split(":")
    auxInput = sys.argv[3:4]
    auxOutput = sys.argv[4:]
    defInput = ''.join(auxInput)		#Input definitivo
    defOutput = ''.join(auxOutput)		#Output definitivo
    HOST = ip
    PORT = int(port)
    tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    dest = (HOST, PORT)
    tcp.connect(dest)

    #Abre o arquivo pra leitura
    file = open(defInput,'rb')

    #Salva o conteudo do arquivo na variavel mensagem, com limite de tamanho
    mensagem = file.read(MAX_TAMANHO)

    cabecalho = criaCabecalho(mensagem)
    # tcp.send(cabecalho)

    try:
      # Dentro da funcao abaixo, eh passado como primeiro parametro a funcao que envia. Como segundo parametro,
      # eh passado todos os parametros da funcao de enviar.
      thread.start_new_thread(tcp.send, cabecalho)
    except:
      print "Erro ao iniciar thread."

    tcp.close()

  if arg == '-s':
    port = sys.argv[2:3]
    HOST = ''
    PORT = int(''.join(port))
    auxInput = sys.argv[3:4]
    auxOutput = sys.argv[4:]
    defInput = ''.join(auxInput)		#Input definitivo
    defOutput = ''.join(auxOutput)		#Output definitivo
    tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    orig = (HOST, PORT)
    tcp.bind(orig)
    tcp.listen(1)
    while True:
      con, cliente = tcp.accept()
      #file = open(defInput,'rb')
      # Salva o conteudo do arquivo na variavel mensagem, com limite de tamanho
      #mensagem = file.read(MAX_TAMANHO)
      con.recv()
      cabecalho = criaCabecalho(mensagem)
      tcp.send(cabecalho)
      con.close()
